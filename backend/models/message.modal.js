// Импортируем библиотеку mongoose, которая помогает работать с базой данных MongoDB
import mongoose from "mongoose";

// Создаем схему (шаблон) для сообщений
const messageSchema = new mongoose.Schema({
	// Определяем поле senderId для хранения идентификатора отправителя сообщения
	senderId: {
		// Указываем, что это будет объектный идентификатор (ObjectId), связанный с пользователем (User)
		type: mongoose.Schema.Types.ObjectId,
		// Связываем с коллекцией (таблицей) "User" (где хранятся данные о пользователях)
		ref: "User",
		// Указываем, что это поле обязательно должно быть заполнено
		required: true
	},
	// Определяем поле receiverId для хранения идентификатора получателя сообщения
	receiverId: {
		// Указываем, что это будет объектный идентификатор (ObjectId), связанный с пользователем (User)
		type: mongoose.Schema.Types.ObjectId,
		// Связываем с коллекцией (таблицей) "User" (где хранятся данные о пользователях)
		ref: "User",
		// Указываем, что это поле обязательно должно быть заполнено
		required: true
	},
	// Определяем поле message для хранения текста сообщения
	message: {
		// Указываем, что это будет строка (текст)
		type: String,
		// Указываем, что это поле обязательно должно быть заполнено
		required: true
	}
},
	// Опции схемы: добавляем автоматическое создание полей с датой и временем создания и обновления записи
	{ timestamps: true });

// Создаем модель (класс) на основе схемы, которую будем использовать для работы с коллекцией "messages" (сообщения)
const Message = mongoose.model("Message", messageSchema);

// Экспортируем модель, чтобы можно было использовать ее в других файлах
export default Message;
